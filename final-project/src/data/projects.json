[
    {
        "title": "ATM Simulation",
        "imageSrc": "projects/project.png",
        "description": "A command-line ATM simulation that performs basic banking actions such as checking balances, depositing, and withdrawing funds.",
        "skills": ["CPP", "Mapping", "UI-Design"],
        "fulldescription": "This software development project involves building an ATM Machine Simulator that replicates the core functionalities of a real-world ATM. The system will begin by validating user credentials through ATM card authentication (simulated card number and PIN verification) before granting access to transaction options. Once authenticated, the user can perform key banking operations, including depositing funds, withdrawing cash, checking account balance(s), and updating their PIN number, with each transaction securely updating the backend account data. The application will feature a user-friendly console, simulate basic error handling (e.g., insufficient funds, incorrect PIN attempts), and maintain transaction logs for accountability, providing a realistic and interactive ATM experience for testing or demonstration purposes.",
        "screenshots":["screenshots/atmLogIn.png", "screenshots/atmWelcome.png", "screenshots/atmAccounts.png", "screenshots/atmBalance.png", "screenshots/atmGoodbye.png"],
        "source": "https://github.com/jandrosilva/CPSC362-Project"
    },

    {
        "title": "Min-Swap Algorithm Project",
        "imageSrc": "projects/project.png",
        "description": "The algorithm project takes an even-sized row of unique integers, checks for adjacent pairs based on predefined mappings, and swaps them if necessary to ensure each pair is next to each other, while counting the total number of swaps.",
        "skills": ["Sorting", "Searching", "CPP"],
        "fulldescription": "This C++ program prompts the user to input integer values to fill an array. The main objective is to sort the array such that each integer is positioned next to its corresponding paired value. To achieve this, the algorithm utilizes an unordered map to track the positions of each integer and its pair. The overall time complexity is O(n), leveraging the unordered map for efficient lookups, the find() function to locate pair values, and the swap() function to rearrange elements in constant time (O(1)). This approach ensures a swift and effective sorting of paired integers in the array.",
        "screenshots": ["screenshots/algorithm1start.png", "screenshots/algorithm1fill.png", "screenshots/algorithm1before.png", "screenshots/algorithm1after.png", "screenshots/algorithm1counter.png"],
        "source": "https://github.com/jandrosilva/Project1_CPSC335"
    }
]